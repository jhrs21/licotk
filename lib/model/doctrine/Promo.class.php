<?php

/**
 * Promo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    elperro
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Promo extends BasePromo {
    public function getPrizes($inOrder = false) {
        if (!$inOrder) {
            return parent::getPrizes();
        }
        
        return Doctrine::getTable('PromoPrize')->retrieveByPromo($this->getId(), PromoPrizeTable::ASC);
    }

    /**
     * Returns a promo object as an array.
     * 
     * @param boolean $with_affiliate
     * @param string $host
     * @return array 
     */
    public function asArray($with_affiliate = false, $host = null) {
        $thumb = $this->getThumb() ? $this->getThumb() : $this->getAffiliate()->getThumb();

        $promo = array(
            'id' => $this->getAlphaId(),
            'name' => $this->getName(),
            'description' => $this->getDescription(),
            'thumb' => sfConfig::get('app_main_domain') . '/uploads/' . $thumb,
            'indepabis' => $this->getIndepabis(),
            'start_date' => $this->getDateTimeObject('starts_at')->format('d/m/Y'),
            'end_date' => $this->getDateTimeObject('ends_at')->format('d/m/Y'),
            'begin_date' => $this->getDateTimeObject('begins_at')->format('d/m/Y'),
            'expiration_date' => $this->getDateTimeObject('expires_at')->format('d/m/Y'),
        );

        if ($this->getPrizes()->count()) {
            $promo['conditions'] = array();

            foreach ($this->getPrizes() as $prize) {
                $promo['conditions'][$prize->getAlphaId()] = $prize->asArray();
            }
        }

        if ($this->getTerms()->count()) {
            $promo['terms'] = array();

            foreach ($this->getTerms() as $term) {
                $promo['terms'][] = $term->getTerm();
            }
        }

        if ($with_affiliate) {
            $affiliate = $this->getAffiliate();

            $promo['affiliate'] = $affiliate->asArray(false, false, $host);
        }

        return $promo;
    }

    public function isActive() {
        $end_date = $this->getDateTimeObject('ends_at');

        $end_date = mktime(0, 0, 0, $end_date->format('m'), $end_date->format('d') + 1, $end_date->format('Y'));

        return (strtotime($this->starts_at) <= time()) && ($end_date >= time());
    }

    /**
     * Finds out if the redeem period has started
     * 
     * @return boolean 
     */
    public function redeemPeriodStarted() {
        return strtotime($this->begins_at) <= time();
    }

    public function isExpired() {
        $expiration_date = $this->getDateTimeObject('expires_at');

        $expiration_date = mktime(0, 0, 0, $expiration_date->format('m'), $expiration_date->format('d') + 1, $expiration_date->format('Y'));

        return $expiration_date < time();
    }

    public function getGreatestThreshold() {
        $threshold = 0;

        foreach ($this->Prizes as $prize) {
            if ($prize->getThreshold() > $threshold) {
                $threshold = $prize->getThreshold();
            }
        }

        return $threshold;
    }

    public function getCouponsQuery($serial = null, $status = null, $id_number = null, $begin_date = null, $end_date = null) {
        $table = Doctrine::getTable('Coupon');

        $query = $table->addByPromoQuery($this->getId());

        if ($serial != '') {
            $query = $table->addBySerialLikeQuery($serial, $query);
        }

        if (!is_null($status)) {
            $query = $table->addByStatusQuery($status, $query);
        }

        if ($id_number != '') {
            $query = $table->addByUserProfileQuery($this->getId(), $id_number, $query);
        }

        if ($begin_date != '') {
            $begin_date = date_format(date_create($begin_date), 'Y-m-d H:i:s');
            $query = $table->addByBeginDateQuery($begin_date, $query);
        }

        if ($end_date != '') {
            $end_date = date_format(date_create($end_date), 'Y-m-d 11:59:00');
            $query = $table->addByEndDateQuery($end_date, $query);
        }

        return $query;
    }

    public function getActiveSurveys($withGlobalSurveys = true) {
        return Doctrine::getTable('Survey')->retrievePromoSurveys($this->getId(), $withGlobalSurveys);
    }

    public function save(Doctrine_Connection $conn = null) {
        if (!$this->getHash()) {
            $this->setHash(hash('sha256', time() . rand(11111, 99999)));
        }

        if (!$this->getAlphaId()) {
            $this->setAlphaId(Util::gen_uuid($this->getHash()));
        }

        return parent::save($conn);
    }

}
