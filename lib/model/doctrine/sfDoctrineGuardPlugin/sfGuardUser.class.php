<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    elperro
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser {

    public function getEmail() {
        return $this->getEmailAddress();
    }

    public function getFullname() {
        if ($this->getFirstName() && $this->getLastName()) {
            return $this->getFirstName() . ' ' . $this->getLastName();
        }

        return $this->getUserProfile()->getFullname();
    }

    public function getCardsRelatedTo($asset, $promo = false, $all = false) {
        $query = Doctrine_Query::create()->from('Card c');
        $query->leftJoin('c.Promo p');
        $query->leftJoin('p.AssetPromo ap ON ap.promo_id = p.id');
        $query->andWhere('c.user_id = ?', $this->getId());
        $query->andWhere('ap.asset_id = ?', $asset);
        $query->andWhere('p.starts_at <= ?', date('Y-m-d H:i:s', mktime(0, 0, 0, date("m"), date("d"), date("Y"))));
        $query->andWhere('p.expires_at >= ?', date('Y-m-d H:i:s', mktime(0, 0, 0, date("m"), date("d"), date("Y"))));

        if ($promo) {
            $query->andWhere('p.id = ?', $promo);
        }

        if (!$all) {
            $query->andWhereNotIn('c.status', array('redeemed', 'expired', 'canceled'));
        }

        $query->orderBy('c.status ASC');

        return $query->execute();
    }
    
    public function getCardsByPromo($promo, $all = false) {
        $query = Doctrine_Query::create()->from('Card c');
        $query->leftJoin('c.Promo p');
        $query->andWhere('c.user_id = ?', $this->getId());
        $query->andWhere('p.id = ?', $promo);

        if (!$all) {
            $query->andWhereNotIn('c.status', array('redeemed', 'expired', 'canceled', 'exchanged'));
        }

        $query->orderBy('c.status ASC');

        return $query->execute();
    }

    public function dataComplete() {
//        $userFieldsToCheck = array('first_name', 'last_name');
//        $userAsArray = $this->toArray();
//
//        foreach ($userFieldsToCheck as $field) {
//            if (is_null($userAsArray[$field]) || $userAsArray[$field] == '') {
//                return false;
//            }
//        }

        $profileFieldsToCheck = array('gender', 'birthdate', 'id_number');
        $profileAsArray = $this->getUserProfile()->toArray();

        foreach ($profileFieldsToCheck as $field) {
            if (is_null($profileAsArray[$field]) || $profileAsArray[$field] == '') {
                return false;
            }
        }

        return true;
    }

    /**
     * Returns a Pocket object related to the user where are stored the PtsLT
     * 
     * @return Pocket
     */
    public function getMainPocket() {
        $pocket = Doctrine::getTable('Pocket')->retrieveUserMain($this->getId());
        return $pocket;
    }

    public function getMembershipCard($is_virtual = false) {
        $mcard = Doctrine::getTable('MembershipCard')->retrieveUserMembershipCard($this->getId(), $is_virtual);
        if ($is_virtual && !$mcard) {
            $mcard = new MembershipCard();
            $mcard->setStatus('active');
            $mcard->setUserId($this->getId());
            $mcard->setIsVirtual(true);
            $mcard->save();
        }
        return $mcard;
    }

    public function asArray() {
        $user = array(
            'id' => $this->getAlphaId(),
            'username' => $this->getUsername(),
            'email' => $this->getEmailAddress(),
            'fullname' => $this->getUserProfile()->getFullname(),
            'id_number' => $this->getUserProfile()->getIdNumber(),
            'pts_lt' => $this->getMainPocket()->getBalance(),
            'data_complete' => $this->dataComplete() ? 1 : 0,
        );

        if ($mcard = $this->getMembershipCard(true)) {
            $user['mcard'] = $mcard->getAlphaId();
        } else { // ESTO ES TEMPORAL HAY QUE QUITARLO OJO!!!!!!
            $user['mcard'] = $this->getEmailAddress();
        }

        $check = array('first_name', 'last_name', 'gender', 'birthdate', 'phone');

        foreach ($check as $field) {
            if (strcasecmp($field, 'birthdate') == 0) {
                if ($this->getUserProfile()->getBirthdate()) {
                    $birthdate = $this->getUserProfile()->getDateTimeObject('birthdate');
                    $user[$field] = array($birthdate->format('d'), $birthdate->format('m'), $birthdate->format('Y'));
                }
            } else if (strcasecmp($field, 'gender') == 0) {
                if ($this->getUserProfile()->getGender()) {
                    $user[$field] = $this->getUserProfile()->getGender();
                }
            } else if (strcasecmp($field, 'phone') == 0) {
                if ($this->getUserProfile()->getPhone()) {
                    $user[$field] = $this->getUserProfile()->getPhone();
                }
            } else {
                if ($this->$field) {
                    $user[$field] = $this->$field;
                }
            }
        }
//
//        if (count($user) < 10) {
//            $user['data_complete'] = 0;
//        }

        return $user;
    }

    public function getParticipationsQuery($promo) {
        $q = Doctrine_Query::create()->from('Card c');

        $q->andWhere('c.user_id = ?', $this->id);

        $q->andWhere('c.promo_id = ?', $promo);

        return $q;
    }

    /**
     * Finds how many times the user has completely participated in the promo "$promo"
     * @param int $promo Promo ID
     * 
     * @return int The number of cards that the user has with status <i>complete</i>, <i>exchanged</i> or <i>redeemed</i>
     */
    public function getCompleteParticipationsNumber($promo) {
        $q = $this->getParticipationsQuery($promo);

        $q->andWhereIn('c.status', array('complete', 'exchanged', 'redeemed'));

        return $q->count();
    }

    public function hasActiveCard($promo) {
        return Doctrine::getTable('Card')->findOneByUserIdAndPromoIdAndStatus($this->id, $promo, 'active');
    }

    /**
     * Finds out if the user is subscribed to an affiliate or not.
     * 
     * @param integer $affiliate Affiliate ID
     * @return mixed If the user is subscribed it returns a Subscription object, false otherwise
     */
    public function isSubscribed($id, $type = 'affiliate') {
        switch ($type) {
            case "both":
                return Doctrine::getTable('Subscription')->findOneByUserIdAndAssetId($this->id, $id);
                break;
            case "affiliate":
                return Doctrine::getTable('Subscription')->findOneByUserIdAndAffiliateId($this->id, $id);
                break;
            case "asset":
                return Doctrine::getTable('Subscription')->findOneByUserIdAndAssetId($this->id, $id);
                break;
        }
    }

    /**
     *
     * @param array $params
     * @param string $type
     * @return mixed  
     */
    public function isSubscribedTo($params, $type = 'both') {
        switch ($type) {
            case "both":
                return Doctrine::getTable('Subscription')->retrieveSubscription($this->getId(), $params['affiliate'], $params['asset']);
                break;
            case "affiliate":
                return Doctrine::getTable('Subscription')->retrieveSubscription($this->getId(), $params['affiliate']);
                break;
            case "asset":
                return Doctrine::getTable('Subscription')->retrieveSubscription($this->getId(), null, $params['asset']);
                break;
        }
    }

    public function getAvailableTickets($promo) {
        //$q = Doctrine::getTable('Ticket')->getByUserAndPromoAndUsedQuery($this->id, $promo);
        $q = Doctrine_Query::create()->from('Ticket t');

        $q->andWhere('t.promo_id = ?', $promo);
        $q->andWhere('t.user_id = ?', $this->id);
        $q->andWhere($alias . '.used = ?', false);

        return $q->execute();
    }

    public function getAvailableTicketsCount($promo) {
        //$q = Doctrine::getTable('Ticket')->getByUserAndPromoAndUsedQuery($this->id, $promo);
        $q = Doctrine_Query::create()->from('Ticket t');

        $q->andWhere('t.promo_id = ?', $promo);
        $q->andWhere('t.user_id = ?', $this->id);
        $q->andWhere('t.used = ?', false);

        return $q->count();
    }

    public function countTodayTickets($promo) {
        $q = Doctrine::getTable('Ticket')->getByUserAndPromoQuery($this->id, $promo);

        $alias = $q->getRootAlias();

        $q->andWhere($alias . '.created_at >= ?', date('Y-m-d H:i:s', mktime(0, 0, 0, date("m"), date("d"), date("Y"))));

        $q->andWhere($alias . '.created_at < ?', date('Y-m-d H:i:s', mktime(0, 0, 0, date("m"), date("d") + 1, date("Y"))));

        return $q->count();
    }

    /**
     *  For a BizUser, returns the assets to which has access 
     */
    public function hasAccessTo() {
        return $this->getAffiliate()->getAssets();
    }

    public function save(Doctrine_Connection $conn = null) {
        if (!$this->getHash()) {
            $this->setHash(hash('sha256', time() . $this->getEmailAddress() . rand(11111, 99999)));
        }

        if (!$this->getAlphaId()) {
            $this->setAlphaId(Util::gen_uuid(hash('sha256', time() . Util::GenSecret() . $this->getEmailAddress() . rand(11111, 99999))));
        }

        if (!$this->getUsername()) {
            $this->setUsername($this->getEmailAddress());
        }

        if ($this->isNew()) {
            $currency = Doctrine::getTable('Currency')->retrieveMain();

            $pocket = new Pocket();
            $pocket->setCurrency($currency);
            $pocket->setIsSuper(true);

            $this->getPockets()->add($pocket);

            $vmcard = new MembershipCard();
            $vmcard->setStatus('active');
            $vmcard->setIsVirtual(true);

            $this->getMembershipCards()->add($vmcard);
            
            $licoteca_level = new LicotecaUserLevel();
            $level = new UserLicotecaUserLevel();
            $level->setLevelId(1);
            
            $this->getUserLicotecaLevels()->add($level);
        }

        return parent::save($conn);
    }
    
    public function getLicotecaLevel() {
        $user_level = Doctrine::getTable('UserLicotecaUserLevel')->findOneByUserId($this->id);
        return $user_level->getLicotecaUserLevel()->getName();
    }

}